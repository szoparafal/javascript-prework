var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  default: () => getDecoratedDataPath
});
var import_utils = __toModule(require("./utils.js"));
function getDecoratedDataPath(jsonAst, dataPath) {
  let decoratedPath = "";
  (0, import_utils.getPointers)(dataPath).reduce((obj, pointer) => {
    switch (obj.type) {
      case "Object": {
        decoratedPath += `/${pointer}`;
        const filtered = obj.children.filter((child) => child.key.value === pointer);
        if (filtered.length !== 1) {
          throw new Error(`Couldn't find property ${pointer} of ${dataPath}`);
        }
        return filtered[0].value;
      }
      case "Array":
        decoratedPath += `/${pointer}${getTypeName(obj.children[pointer])}`;
        return obj.children[pointer];
      default:
        console.log(obj);
    }
  }, jsonAst);
  return decoratedPath;
}
function getTypeName(obj) {
  if (!obj || !obj.children) {
    return "";
  }
  const type = obj.children.filter((child) => child && child.key && child.key.value === "type");
  if (!type.length) {
    return "";
  }
  return type[0].value && `:${type[0].value.value}` || "";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=get-decorated-data-path.js.map
